[cocos2d-x]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos2dx

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.9/include
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -I%(clangllvmdir)s/%(clang_include)s
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources
cocos_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/cocos2d.h %(cocosdir)s/cocos/2d/CCProtectedNode.h %(cocosdir)s/cocos/base/CCAsyncTaskPool.h %(cocosdir)s/cocos/scripting/js-bindings/manual/BaseJSAction.h

replace_headers=CCProtectedNode.h::2d/CCProtectedNode.h,CCAsyncTaskPool.h::base/CCAsyncTaskPool.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".

classes = New.* Sprite SpriteBatchNode SpriteFrame SpriteFrameCache Scene Node Director Layer.* Menu.* Touch PointArray Particle.* Label.* Atlas.* TextureCache.* Texture2D ParallaxNode TileMap.* TMX.* RenderTexture Set Scheduler DrawNode FileUtils$ GLProgram GLProgramCache Application ClippingNode MotionStreak TextFieldTTF GLViewProtocol GLView SAXParser Event(?!.*(Physics).*).* Device Configuration ProtectedNode GLProgramState Image AsyncTaskPool Properties Material RenderState Pass ActionManager Action FiniteTimeAction ActionInterval ActionInstant ActionEase Move.* Rotate.* Blink.* Tint.* Sequence Repeat.* FadeIn FadeTo FadeOut Ease.* Scale.* Spawn ReverseTime FlipX FlipY Delay.* Skew.* JumpTo JumpBy Place.* Show.* ToggleVisibility.* RemoveSelf Hide Cardinal.* CatmullRom.* CallFunc CallFuncN Bezier.* CardinalSpline.* Speed TargetedAction Acceleration Component ComponentContainer BaseJSAction

classes_need_extend = Node Layer.* Sprite SpriteBatchNode SpriteFrame Menu MenuItem.* Scene DrawNode MotionStreak ParticleBatchNode ParticleSystem TextFieldTTF RenderTexture TileMapAtlas TMXLayer TMXTiledMap TMXMapInfo ProgressTimer ParallaxNode Label.* GLProgram .*Action.* Move.* Rotate.* Blink.* Tint.* Sequence Repeat.* Fade.* Ease.* Scale.* Spawn ReverseTime Flip.* Delay.* Skew.* Jump.* Place.* Show.* Progress.* Bezier.* Hide CallFunc CallFuncN Component BaseJSAction

field = Acceleration::[x y z timestamp]

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = Node::[^setPosition$ setGLServerState description getUserObject .*UserData getGLServerState .*schedule setContentSize setAnchorPoint setColor pause resume setAdditionalTransform convertToWorldSpace get(.*)Callback$],
        Sprite::[getQuad ^setPosition$ create setPolygonInfo initWithPolygon getPolygonInfo],
        SpriteFrame::[setPolygonInfo getPolygonInfo hasPolygonInfo],
        SpriteBatchNode::[getDescendants],
        MotionStreak::[draw update],
        DrawNode::[drawPoly$ listenBackToForeground],
        Director::[getAccelerometer getProjection getFrustum getRenderer getConsole getCocos2dThreadId],
        Layer.*::[didAccelerate keyPressed keyReleased],
        Menu.*::[.*Target getSubItems create initWithItems alignItemsInRows alignItemsInColumns],
        MenuItemToggle::[initWithCallback],
        Copying::[*],
        LabelProtocol::[*],
        LabelTextFormatProtocol::[*],
        Label::[getLettersInfo createWithTTF getTTFConfig setTTFConfig getFontAtlas listenToBackground listenToFontAtlasPurge],
        .*Delegate::[*],
        PoolManager::[*],
        Texture2D::[initWithPVRTCData addPVRTCImage releaseData setTexParameters initWithData keepData getPixelFormatInfoMap updateWithData forceDeleteALLTexture2D initWithMipmaps],
        Set::[begin end acceptVisitor],
        IMEDispatcher::[*],
        Thread::[*],
        Profiler::[*],
        ProfilingTimer::[*],
        CallFunc::[create initWithFunction (g|s)etTargetCallback],
        CallFuncN::[create initWithFunction],
        SAXParser::[(?!(init))],
        SAXDelegator::[*],
        Color3bObject::[*],
        TouchDispatcher::[*],
        EGLTouchDelegate::[*],
        ScriptEngineManager::[*],
        KeypadHandler::[*],
        Invocation::[*],
        GLView::[end swapBuffers getAllTouches getGLContextAttrs],
        GLViewProtocol::[pollInputEvents handleTouches.* setScissorInPoints getScissorRect isScissorEnabled swapBuffers],
        SchedulerScriptHandlerEntry::[*],
        Size::[*],
        Point::[*],
        PointArray::[*],
        Rect::[*],
        Data::[*],
        Range::[*],
        Image::[initWithString initWithImageData getData$ getMipmaps initWithRawData],
        Sequence::[create],
        Spawn::[create],
        Speed::[create],
        Repeat::[create],
        RepeatForever::[create],
        TargetedAction::[create],
        RotateTo::[calculateAngles],
        GLProgram::[getProgram setUniformLocationWith(1|2|3|4)fv setUniformLocationWith(2|3|4)iv setUniformLocationWithMatrix(2|3|4)fv getUniformFlags getVertexAttrib],
        GLProgramState::[setUniformVec4 setVertexAttribPointer],
        TMXLayer::[getTiles setTiles],
        TMXMapInfo::[startElement endElement textHandler],
        ParticleSystemQuad::[postStep setBatchNode draw setTexture$ setTotalParticles updateQuadWithParticle setupIndices listenBackToForeground initWithTotalParticles particleWithFile node],
        LayerMultiplex::[create layerWith.* initWithLayers],
        CatmullRom.*::[create actionWithDuration initWithDuration],
        Bezier.*::[create actionWithDuration initWithDuration],
        CardinalSpline.*::[create actionWithDuration setPoints initWithDuration],
        Scheduler::[pause resume ^unschedule$ unscheduleUpdate unscheduleAllForTarget schedule isTargetPaused isScheduled],
        TextureCache::[addPVRTCImage],
        *::[copyWith.* ^cleanup$ onEnter.* onExit.* ^description$ getObjectType onTouch.* onAcc.* onKey.* onRegisterTouchListener operator.+],
        FileUtils::[getFileData getDataFromFile writeDataToFile setFilenameLookupDictionary destroyInstance getFullPathCache getContents],
        Application::[^application.* ^run$ getCurrentLanguageCode setAnimationInterval],
        ccFontDefinition::[*],
        NewTextureAtlas::[*],
        RenderTexture::[listenToBackground listenToForeground saveToFile],
        TextFieldTTF::[(g|s)etDelegate],
        EventListenerVector::[*],
        EventListener(Touch|Keyboard|Mouse|Acceleration|Focus|Custom).*::[create],
        EventTouch::[(s|g)etTouches],
        EventKeyboard::[*],
        Device::[getTextureDataForText],
        EventDispatcher::[dispatchCustomEvent addCustomEventListener],
        EventCustom::[getUserData setUserData],
        EventListenerCustom::[init],
        EventListener::[init getHashCode],
        AttachNode::[*],
        Device::[getTextureDataForText],
        ClippingNode::[init],
        RenderState::[setStateBlock],
        ParallaxNode::[getParallaxArray setParallaxArray],
        TileMapAtlas::[getTGAInfo setTGAInfo],
        TMXObject::[getGroupSize],
        Component::[serialize onAdd onRemove update],
        BaseJSAction::[description clone reverse isDone step update]

rename_functions = SpriteFrameCache::[addSpriteFramesWithFile=addSpriteFrames getSpriteFrameByName=getSpriteFrame],
    MenuItemFont::[setFontNameObj=setFontName setFontSizeObj=setFontSize getFontSizeObj=getFontSize getFontNameObj=getFontName],
    ProgressTimer::[setReverseProgress=setReverseDirection],
    Animation::[create=createWithAnimationFrames],
    AnimationCache::[addAnimationsWithFile=addAnimations],
    GLProgram::[initWithByteArrays=initWithString initWithFilenames=init setUniformLocationWith1i=setUniformLocationI32 bindAttribLocation=addAttribute],
    Node::[getGLProgram=getShaderProgram setGLProgram=setShaderProgram getPositionZ=getVertexZ setPositionZ=setVertexZ removeFromParentAndCleanup=removeFromParent removeAllChildrenWithCleanup=removeAllChildren setRotationSkewX=setRotationX setRotationSkewY=setRotationY getRotationSkewX=getRotationX getRotationSkewY=getRotationY getNodeToParentTransform=getNodeToParentTransform3D getParentToNodeTransform=getParentToNodeTransform3D getNodeToWorldTransform=getNodeToWorldTransform3D getWorldToNodeTransform=getWorldToNodeTransform3D getNodeToWorldAffineTransform=getNodeToWorldTransform getNodeToParentAffineTransform=getNodeToParentTransform getParentToNodeAffineTransform=getParentToNodeTransform getWorldToNodeAffineTransform=getWorldToNodeTransform],
    LabelAtlas::[create=_create],
    Sprite::[getPositionZ=getVertexZ setPositionZ=setVertexZ],
    SpriteBatchNode::[removeAllChildrenWithCleanup=removeAllChildren],
    DrawNode::[drawQuadraticBezier=drawQuadBezier],
    FileUtils::[loadFilenameLookupDictionaryFromFile=loadFilenameLookup],
    EventDispatcher::[removeEventListener=removeListener removeEventListenersForType=removeListeners removeEventListenersForTarget=removeListeners removeCustomEventListeners=removeCustomListeners removeAllEventListeners=removeAllListeners pauseEventListenersForTarget=pauseTarget resumeEventListenersForTarget=resumeTarget],
    EventMouse::[getMouseButton=getButton setMouseButton=setButton setCursorPosition=setLocation getCursorX=getLocationX getCursorY=getLocationY],
    Configuration::[getInfo=dumpInfo],
    LayerColor::[initWithColor=init],
    GLProgramCache::[getGLProgram=getProgram addGLProgram=addProgram reloadDefaultGLPrograms=reloadDefaultShaders loadDefaultGLPrograms=loadDefaultShaders],
    TextFieldTTF::[textFieldWithPlaceHolder=create],
    Texture2D::[getGLProgram=getShaderProgram setGLProgram=setShaderProgram releaseGLTexture=releaseTexture],
    Speed::[setSpeed=_setSpeed getSpeed=_getSpeed],
    ComponentContainer::[get=getComponent]

rename_classes = ParticleSystemQuad::ParticleSystem,
           SAXParser::PlistParser,
           GLProgramCache::ShaderCache,
           CallFunc::_CallFunc,
           CallFuncN::CallFunc

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = Node Director FileUtils TMXMapInfo Application GLViewProtocol SAXParser Configuration

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref Clonable

# classes that create no constructor
# Set is special and we will use a hand-written constructor

abstract_classes = Director SpriteFrameCache Set FileUtils Application GLViewProtocol GLView SAXParser Configuration EventListener AsyncTaskPool Action FiniteTimeAction ActionInterval ActionEase EaseRateAction EaseElastic EaseBounce ActionInstant ComponentContainer

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = yes
